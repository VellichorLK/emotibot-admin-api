# Reference:
# https://cbonte.github.io/haproxy-dconv/1.6/configuration.html

# Cluster list:
# Shadow:
#   - 9000: main cluster port (http)
#   - (TBD) 9001: backup dummy webserver
# Lele:
#   - 9010: lele cluster
#   - 9011: lele backup dummy webserver
# stats:
#   - 9527: haproxy stats port
# FIXME: need a dedicate server for shadow?

# ----------------------------------------------------------------------------
# Basic configuration
global
    # Max concurrent connection
    maxconn 4096
    # Max global qps
    maxconnrate 2048
    #stats socket /tmp/haproxy
    log 127.0.0.1   local0
    log 127.0.0.1   local1 notice

defaults
    log     global
    option  httplog
    option  dontlognull
    option http-server-close  # For multipart/form-data
    mode http
    # Timeout settings
    timeout http-request 10s  # Max allowed time to wait for a complete HTTP request
    timeout client  20s       # Max inactivity time on the client side. (In TCP mode, set same as timeout server)
    timeout connect 1s        # Max time to wait for a connection attempt to a server to succeed.
    timeout server  20s       # Max inactivity time on the server side.
    timeout http-keep-alive 4s
    # Will retry if a server is down
    option  redispatch        # Dispatch the request to another server if server down
    retries 1                 # Default retries = 3



listen stats
    bind *:9527
    maxconn 10
    mode http
    stats enable
    stats hide-version
    stats refresh 30s
    stats realm Haproxy\ Statistics
    stats uri /

# ----------------------------------------------------------------------------
# The shadow cluster (Our main cluster)
frontend shadow_frontend
    bind *:9001
    mode http

  # Rule0: The default backend, blance by a specific header generated from userid
    # NOTE: this won't work for POST with multipart/form-data
    # We'll use another proxy to add the X-Lb-Uid header (goproxy)
    ## GET & POST:
    ## http-request set-header X-Lb %[urlp(UserID)]%[urlp(userid)]...
    default_backend shadow

  # Rule1: All blob files are stored in one server
    acl is_blob path_beg /Files/label/ /Files/knowledge/ /Files/XiaoyingSong/
    use_backend shadow_blob if is_blob

  # Rule2: All images related services should go to the same server (UserID/OpenID)
    # checkFace*       : checkFaceCelebrity.php checkFaceWeChat.php
    # getCartoon*      : getCartoonCamera.php getCartoonCameraWeChat.php
    # getClothes       : getClothes.php
    # getBeauty*       : getBeautyFilter.php getBeautyFilterWeChat.php getBeautyFilterWeChat.php getBeautyFilterWeChat2.php
    # getEmotiEyE*     : getEmotiEyE1.php getEmotiEyE2.php getEmotiEyEWeChat.php
    # getFace*         : getFaceLandmark.php getFaceSize.php getFaceSwap1.php getFaceSwap2.php getFaceSwap3.php getFaceLandmarkWeChat.php
    # getFashion*      : getFashion.php getFashion2.php
    # getPornograph*   : getPornographicFilter.php getPornographicFilterWeChat.php
    # setShareImg*     : setShareImg.php
    # uploadHeadImage* :uploadHeadImage.php
    # uploadImage*     :uploadImage.php
    acl is_api  path_beg /api/APP
    acl is_img_api path_sub checkFace getCartoon getClothes getBeauty getEmotiEyE getFace getFashion getPornograph setShareImg uploadHeadImage uploadImage
    acl is_img_demo path_beg /htmlmessage/share /Files/ShareImg /Files/facesize_cmb
    # Old Image APIs
    use_backend shadow_image if is_api is_img_api # Note AND is implicit
    # app demo page (should be temporary?)
    use_backend shadow_image if is_img_demo

  # Rule 3: Overflow protection
    acl shadow_full be_conn(shadow) gt 250
    use_backend shadow_backup if shadow_full

  # Rule 4: All regression tests should go to the same machine.
    acl is_test_user hdr_beg(X-Lb-Uid) -i test
    use_backend shadow_test if is_test_user

backend shadow_backup
    mode http
    default-server maxconn 2000
    server dummy1 172.17.0.1:9011

backend shadow_image
    mode http
    default-server maxconn 100
    server idc47 10.0.0.47:80

backend shadow_blob
    mode http
    default-server maxconn 500
    server idc46 10.0.0.46:80

backend shadow_test
    mode http
    default-server maxconn 10
    server idc47 10.0.0.47:80

backend shadow
    mode http

    # X-Lb-Uid is inserted by some other proxy that has all possible IDs
    balance hdr(X-Lb-Uid)
    hash-type consistent

    # Example to enable health check on the houta servers.
    # option httpchk HEAD /logout.php HTTP/1.0
    # server sta 192.168.1.127:80 check fall 3 rise 2

    # As of 2016/12/27 max qps = 5 (less than 40 maxconn)
    default-server maxconn 40

    # Let's reserve the 1st server for DB and regression tests
    # server idc45 10.0.0.45:80
    server idc46 10.0.0.46:80  # For fileservice
    server idc47 10.0.0.47:80  # For image apis
    server idc48 10.0.0.48:80  # General servers

    server idc50 10.0.0.50:80
    server idc51 10.0.0.51:80
    # server idc52 10.0.0.52:80
    # server idc53 10.0.0.53:80
    # server idc54 10.0.0.54:80
    # server idc55 10.0.0.55:80
    # server idc56 10.0.0.56:80




















# ----------------------------------------------------------------------------
# Temporary lele cluster, should be merged to shadow later...
frontend lele_frontend
    bind *:9010
    mode http
    # We'll use the backup server if too many incomming connections
    #default_backend lele
    default_backend shadow
    acl lele_full be_conn(lele) gt 15
    use_backend lele_backup if lele_full

# Backup dummy server if all lele servers are dead
backend lele_backup
    mode http
    default-server maxconn 2000
    server dummy1 172.17.0.1:9011

# Note: 2017/04/26 (wmyao)
# We're going to recycle the last lele machine (idc41). Will use backend shadow directly.
# Looks like lele does not have any thing other than chat (e.g., joke pics)

backend lele
    # Health check
    # See https://www.haproxy.com/doc/aloha/7.0/haproxy/healthchecks.html
    # send the request “get /check” and consider all statuses as valid bu 5xx:
    # option httpchk get /
    # http-check except ! rstats ^5

    # Route user by userid field in GET/POST
    # If the request is POST, we only check the first 1024 Bytes for the userid
    # If no userid found, will use roundrobin
    balance url_param userid check_post 1024
    # balance roundrobin

    mode http
    default-server maxconn 10
    #server idc41 10.0.0.41:80
    #server idc42 10.0.0.42:80
    #server idc43 10.0.0.43:80
