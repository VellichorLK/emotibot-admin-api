input {
    file {
        path => ["/backend_logs/*/*/*/*/*.log"]
        type => "json"
        close_older => 5
        stat_interval => 5
        start_position => "beginning"
    }
    beats {
        port => "5043"
        type => "json"
    }
}

filter {
    grok {
        match => ["path", "%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"]
    }

    if "/123.log" in [source] {
        drop {}
    } else {
        json {
            source => "message"
            target => "parsedjson"
        }
        
        
        # TODO: check if parsedjson contain 3 parts
        mutate {
            add_field => {
                "dc_raw" => {}
                "cu_raw" => {}
                "dc" => {}
                "cu" => {}
            }
        }

        # get dc/cu parts from log
        # by version check
        if "ver" in [parsedjson] {
            if "20170427" == [parsedjson][ver] {
                mutate {
                    replace => {
                        "dc_raw" => "%{[parsedjson][DC]}"
                    }
                    replace => {
                        "cu_raw" => "%{[parsedjson][CU]}"
                    }
                }    
            } else {
                # TODO(mike): unknown version, log or notify, 
                drop {}
            }
        } else {
            # ===== parse DC part =====
            if "responseRaw" in [parsedjson][0] or "response raw" in [parsedjson][0] {
                mutate {
                    replace => {
                        "dc_raw" => "%{[parsedjson][0]}"
                    }
                }
            } else if "responseRaw" in [parsedjson][2] or "response raw" in [parsedjson][2] {
                mutate {
                    replace => {
                        "dc_raw" => "%{[parsedjson][2]}"
                    }
                }
            }

            # ===== parse CU part =====
            if "UserID" in [parsedjson][0] {
                mutate {
                    replace => {
                        "cu_raw" => "%{[parsedjson][0]}"
                    }
                }
            } else if "UserID" in [parsedjson][1] {
                mutate {
                    replace => {
                        "cu_raw" => "%{[parsedjson][1]}"
                    }
                }
            } else if "UserID" in [parsedjson][2] {
                mutate {
                    replace => {
                        "cu_raw" => "%{[parsedjson][2]}"
                    }
                }
            }
        }

        # TODO: how to log
        if ![cu_raw] or ![dc_raw] {
            drop {}
        }

        # ===== parse dc and cu =====
        json {
            source => "dc_raw"
            target => "dc"
        }

        json {
            source => "cu_raw"
            target => "cu"
        }


        # ===== add output field =====
        mutate {
            add_field => {
                "user_id" => {}
                "user_Q" => {}
                "user_Q(rewrite)" => {}
                "std_q" => "" 
                "answer" => {}
                "module" => {}
                "emotion" => "" 
                "log_time" => {}
                "score" => {}
                "host" => {}
                "unique_id" => {}
                "custom_info" => "" 
                "topic_mood" => null
                "app_id" => "" 
            }
        }
        
        mutate {
            replace => {
                "user_id" => "%{[cu][UserID]}"
                "module" => "%{[dc][module]}"
            }
        }
        
        if "UniqueID" in [cu] {
            mutate {
                replace => {
                    "unique_id" => "%{[cu][UniqueID]}"
                }
            }
        }

        if "Text0" in [dc] {
            mutate {
                replace => {
                    "user_q" => "%{[dc][Text0]}"
                }
            }
        }
        
        if "Text1" in [dc] {
            mutate {
                replace => {
                    "user_q(rewrite)" => "%{[dc][Text1]}"
                }
            }
        }
        
        if "match_question" in [dc][responseRaw][answer_info] {
            mutate {
                replace => {
                    "std_q" => "%{[dc][responseRaw][answer_info][match_question]}"
                }
            }
        }

        if [dc][topic_mood] {
            mutate {
                replace => {"topic_mood" => "%{[dc][topic_mood]}"}
            }
            mutate {
                split => ["topic_mood", " "]
            }
        }
        
        if "answer" in [dc] {
            mutate {
                replace => {
                    "answer" => "%{[dc][answer]}"
                }
            }
        }

        if [topic_mood] and [topic_mood] != []{
            mutate {
                replace => {
                    "emotion" => "%{[topic_mood][0]}"
                }
            }
        }

        date {
            match => [ "[cu][createdtime]", "YYYY-MM-dd HH:mm:ss" ]
                timezone => "Asia/Shanghai"
                target => "log_time"
        }
        
        date {
            match => [ "[cu][createdtime]", "YYYY-MM-dd HH:mm:ss" ]
                timezone => "Asia/Shanghai"
                target => "@timestamp"
        }

        if "score" in [dc] {
            mutate {
                replace => {
                    "score" => "%{[dc][score]}"
                }
            }
        }

        if [beat] {
             mutate {
                 replace => {
                     "host" => "%{[beat][name]}"
                 }
             }
         }

        if "UniqueID" in [cu] {
            mutate {
                replace => {
                    "unique_id" => "%{[cu][UniqueID]}"
                }
            }
        }
 
        if "customInfo" in [cu] {
            mutate {
                replace => {
                    "custom_info" => "%{[cu][customInfo]}"
                }
            }
        }

        if "robot" in [cu] {
            mutate {
                replace => {
                    "app_id" => "%{[cu][robot]}"
                }
            }
        }
       
        mutate {

             remove_field => ["parsedjson", "cu", "dc", "cu_raw", "dc_raw", "topic_mood"]
        }
    }
}


output {
    stdout { codec => rubydebug }

#    file {
#	codec => "json"
#        path => "/output/%{filename}.log.out"
#    }

    elasticsearch {
         hosts => ["elasticsearch:9200"]
    }

    jdbc {
        driver_jar_path => "/vendor/jar/jdbc/mysql-connector-java-5.1.36-bin.jar"
        driver_class => "com.mysql.jdbc.Driver"
        connection_string => "jdbc:mysql://172.17.0.1:3306/backend_log?user=root&password=password&characterEncoding=utf-8"
        statement => [ "INSERT INTO chat_record (user_id, user_Q, log_time, answer, module, emotion, std_Q, score, host, unique_id, custom_info, app_id) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", "%{user_id}", "%{user_q}", "%{log_time}", "%{answer}", "%{module}", "%{emotion}", "%{std_q}", "%{score}", "%{host}", "%{unique_id}", "%{custom_info}", "%{app_id}"]
    }
    
    http {
    	http_method => "post"
    	url => "http://10.0.0.100:15501/log/rawlog/%{unique_id}"
    	content_type => "application/json"
    }
}
