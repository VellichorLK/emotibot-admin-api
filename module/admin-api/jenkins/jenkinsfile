def TestBaseImage='docker-reg.emotibot.com.cn:55688/go-build:1a74d1b1-1.10-alpine'
pipeline {
    agent {
        node('docker-build01')
    }
    environment {
        // credential from "harbor login test"
        DOCKER_SECRECT=credentials('500bc2f5-9bf7-485a-9748-30998e62e8fb')
    }
    stages {
        stage('admin-api') {
            when {
                anyOf {
                    changeset "module/admin-api/**"
                    changeset "pkg/**"
                    changelog '(#admin-api)'
                }
            }
            stages{
                stage('testing') {
                    steps {
                        script{
                            def tasks = [:]
                            tasks["HTML report"] = {
                                stage('HTML report'){
                                    sh "docker run --rm -v `pwd`:/go/src/emotibot.com/emotigo -w /go/src/emotibot.com/emotigo/module/admin-api ${TestBaseImage} sh \"./jenkins/runTest.sh\""
                                    publishHTML (target: [
                                        allowMissing: false,
                                        alwaysLinkToLastBuild: false,
                                        keepAll: true,
                                        reportDir: 'module/admin-api/jenkins',
                                        reportFiles: 'index.html',
                                        reportName: "Unit-test Report"
                                    ])
                                }
                            }
                            tasks["Unit test report"] = {
                                stage('Unit test report') {
                                    sh "docker run --rm -v `pwd`:/go/src/emotibot.com/emotigo -w /go/src/emotibot.com/emotigo/module/admin-api ${TestBaseImage} sh ./jenkins/exportAsJUnit.sh"
                                    junit 'module/admin-api/jenkins/unittest.xml'
                                }
                            }
                            tasks["Coverage report"] = {
                                stage('Coverage report') {
                                    sh "docker run --rm -v `pwd`:/go/src/emotibot.com/emotigo -w /go/src/emotibot.com/emotigo/module/admin-api ${TestBaseImage} sh ./jenkins/coverageTest.sh"
                                    step([$class:'CoberturaPublisher',
                                        coberturaReportFile: 'module/admin-api/coverage.xml',
                                    ])
                                }
                            }
                            parallel tasks
                        }
                    }
                }
                stage('Build docker'){
                    steps {
                        sh "cd 'module/admin-api/docker' && bash build.sh;"
                    }
                }
                stage('Push docker'){
                    steps {
                        sh 'docker login -u ${DOCKER_SECRECT_USR} -p ${DOCKER_SECRECT_PSW} harbor.emotibot.com '
                        sh "cd 'module/admin-api/docker' && bash push_images.sh;"
                    }
                }
            }
        }
    }
    post {
        cleanup {
            sh 'docker logout harbor.emotibot.com > /dev/null 2>&1'
        }
        failure {
            sh "bash module/admin-api/jenkins/send2slack.sh"
        }
        unstable {
            sh "bash module/admin-api/jenkins/send2slack.sh"
        }
        success {
            sh "bash module/admin-api/jenkins/send2slack.sh success"
        }
    }
}